version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15
    container_name: lis-database
    environment:
      POSTGRES_DB: lis_db
      POSTGRES_USER: lis_user
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-lis_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lis_user -d lis_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  # LIS Application
  lis-app:
    build: 
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: lis-application
    depends_on:
      database:
        condition: service_healthy
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://lis_user:${DATABASE_PASSWORD:-lis_password}@database:5432/lis_db
      - SECURITY_SECRET_KEY=${SECRET_KEY:-change-this-in-production}
      - COMM_TCP_HOST=0.0.0.0
      - COMM_TCP_PORT=8000
      - API_HOST=0.0.0.0
      - API_PORT=8080
    ports:
      - "8000:8000"  # TCP server for equipment
      - "8080:8080"  # REST API
    volumes:
      - app_logs:/app/logs
      - app_data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - lis-network

  # Redis for caching and message queuing
  redis:
    image: redis:7-alpine
    container_name: lis-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - lis-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: lis-nginx
    depends_on:
      - lis-app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    restart: unless-stopped
    networks:
      - lis-network

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: lis-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - lis-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: lis-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - lis-network

networks:
  lis-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  app_logs:
  app_data:
  nginx_logs:
  prometheus_data:
  grafana_data: 